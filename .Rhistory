load(KernSmooth)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1,2))
x<-makeVector()
x
x$set(c(1,2))
x
x$getmean
x$getmean()
x$setmean()
x$set()
x$set
x$set(3)
x
x$get()
x$set(c(1,2))
x$get()
cachemean(x)
x$setmean(3)
chachemean(x)
cachemean(x)
## This function creates a "matrix" object that is a list of four
## functions.
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set<- function(y){
x<<-y
inv<<-NULL
}
get<-function() x
setinverse<- function(inverse) inv<<-inverse
getinverse<- finction() inv
list(set=set, get=get, setmean=setmean, getmean=getmean)
}
## This function will return the inverse stored in the matrix object.
## If the inverse has not been calculated, it calculates the inverse,
## and stores it in the cache.
cacheSolve <- function(x, ...) {
inv<-x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
matrix<-x$get()
inv<-solve(matrix)
x$setinverse(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set<- function(y){
x<<-y
inv<<-NULL
}
get<-function() x
setinverse<- function(inverse) inv<<-inverse
getinverse<- function() inv
list(set=set, get=get, setmean=setmean, getmean=getmean)
}
## This function will return the inverse stored in the matrix object.
## If the inverse has not been calculated, it calculates the inverse,
## and stores it in the cache.
cacheSolve <- function(x, ...) {
inv<-x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
matrix<-x$get()
inv<-solve(matrix)
x$setinverse(inv)
inv
}
x<-makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set<- function(y){
x<<-y
inv<<-NULL
}
get<-function() x
setinverse<- function(inverse) inv<<-inverse
getinverse<- function() inv
list(set=set, get=get,
setinverse=setinverse, getinverse=getinverse)
}
## This function will return the inverse stored in the matrix object.
## If the inverse has not been calculated, it calculates the inverse,
## and stores it in the cache.
cacheSolve <- function(x, ...) {
inv<-x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
matrix<-x$get()
inv<-solve(matrix)
x$setinverse(inv)
inv
}
x<-makeCacheMatrix()
x
x$set()
x$set(c(1:4,2,2))
x$get()
as.matrix(c(1,4))
matrix(1:4,2,2)
x$set(matrix(1:4,2,2))
x$get()
cacheSolve(x)
cacheSolve(x)
library(datasets)
data("iris")
?iris
iris
lapply(split(iris,iris$Species),mean)
split(iris,iris$Species)
lapply(split(iris,iris$Species),function(x) colMeans(x[,"Sepal.Length"]))
lapply(split(iris,iris$Species),function(x) colMeans(x[,1:4])
)
colMeans(iris)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
mtcars
sapply(mtcars,cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
lapply(mtcars,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
split(mtcars$mpg,mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars,2,mean)
mean(mtcars$mpg,mtcars$cyl)
tapply(mtcars$hp,mtcars$cyl,mean)
x<-tapply(mtcars$hp,mtcars$cyl,mean)
x[3]-x[1]
x
swirl()
library(swirl)
set.seed(1)
rpois(5,2)
x<-rep(0:1,each=5)
library(swirl)
install.packages(knitr)
install.packages("knitr")
setwd("~/Documents/git/RepData_PeerAssessment1")
data<-read.csv("activity.csv")
View(data)
str(data)
weekdays(data$date)
data$date
tapply(data$steps,data$date,mean)
tapply(data$steps,data$date,mean,na.rm=TRUE)
meantot<-tapply(data$steps,data$date,mean,na.rm=TRUE)
plot(meantot)
plot(data$date,data$steps)
meantot<-tapply(data$steps,data$date,sum,na.rm=TRUE)
plot(meantot)
plot.histogram(meantot)
hist(meantot,plot=TRUE)
mean(tot)
mean(meantot)
median(meantot)
summary(meantot)
hist(meantot,plot=TRUE,main="something")
hist(meantot,plot=TRUE,main="something",xlab="this")
str(data)
tapply(data$steps,data$interval)
tapply(data,data$interval,function(x){})
meantot<-tapply(data,data$date,sum,na.rm=TRUE)
tapply(data$steps,data$interval,mean,na.rm=TRUE)
daily<-tapply(data$steps,data$interval,mean,na.rm=TRUE)
plot(daily,type="l")
plot(names(daily),daily,type="l")
plot(daily,type="l")
as.POSIXct(data$interval)
as.POSIXlt(data$interval)
as.POSIXlt(data$interval,origin="data$date")
plot(data$interval,daily,type="l")
plot(as.factor(data$interval),daily,type="l")
as.factor(data$interval)
levels(data$interval
)
levels(as.factor(data$interval))
plot(levels(as.factor(data$interval)),daily,type="l")
plot(names(daily),daily,type="l")
plot(daily)
plot(daily,type="l")
plot(names(daily),daily,type="l")
plot(levels(as.factor(data$interval)),daily,type="l")
plot(daily)
plot(daily,type="l")
plot(seq(0,288,5)daily,type="l")
seq(0,288,5)
seq(5,10)
seq(0,23*60+55,5)
24*60
str(names(daily))
plot(names(daily),daily,type="l")
plot(names(daily[1:6]),daily[1:6],type="l")
plot(names(daily[1:20]),daily[1:20],type="l")
plot(daily,type="l",ylab=names(daily))
plot(daily,type="l",yaxis=names(daily))
as.POSIXlt(names(daily))
strptime("1120","%H%M")
strptime("1120","%H%M",tz="UDT")
strptime("1120","%H%M",tz="GMT")
strptime("1120","%H%M",tz="UTC")
strptime(names(daily),"%H%M",tz="UTC")
names(daily)[1]
max(daily)
daily==max(daily)
which.max(daily)
max(daily)
view(daily)
View(data)
daily[104]
8:35
View(data)
View(data)
plot(daily,type="l",xaxt='n')
axis(1,seq(0,1435,5))
seq(0,1435,5)
axis(1,xaxp=c(0,1435,10))
plot(daily,type="l",xaxt='n')
axis(1,xaxp=c(0,1435,10))
plot(seq(0,1435,5)daily,type="l",xaxt='n')
plot(seq(0,1435,5),daily,type="l",xaxt='n')
plot(seq(0,1435,5),daily,type="l")
plot(daily,type="l")
plot(seq(0,1435,5),daily,type="l")
data$interval<-as.character(data$interval)
str(data)
test<-tapply(data$steps,data$interval,mean,na.rm=TRUE)
head(test)
names(daily)
plot(as.character(names(daily)),daily,type="l")
plot(daily,type="l")
plot(as.character(names(daily)),daily,type="l")
plot(daily,type="l")
24*60
maxsteps<-which.max(daily)
maxsteps
